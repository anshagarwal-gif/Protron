package com.Protronserver.Protronserver.Controller;

import com.Protronserver.Protronserver.Entities.*;
import com.Protronserver.Protronserver.Service.*;
import com.Protronserver.Protronserver.DTOs.*;
import com.Protronserver.Protronserver.Utils.LoggedInUserUtils;
import com.Protronserver.Protronserver.Entities.SystemMaster;
import com.Protronserver.Protronserver.Service.BudgetDocumentService;
import jakarta.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import jakarta.validation.Valid;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

/**
 * REST Controller for Budget Line operations
 */
@RestController
@RequestMapping("/api/budget-lines")

public class BudgetLineController {

    @Autowired
    private BudgetLineService budgetLineService;

    @Autowired
    private BudgetAllocationService budgetAllocationService;

    @Autowired
    private LoggedInUserUtils loggedInUserUtils;

    @Autowired
    private SystemMasterService systemMasterService;

    @Autowired
    private BudgetDocumentService budgetDocumentService;

    /**
     * Add a new budget line item
     */
    @PostMapping
    public ResponseEntity<?> addBudgetLine(@Valid @RequestBody BudgetLineRequest request) {
        try {
            // Validate amount approved against allocations if provided
            if (request.getAllocations() != null && !request.getAllocations().isEmpty()) {
                BigDecimal totalAllocationAmount = request.getAllocations().stream()
                        .map(allocation -> allocation.getAmount())
                        .reduce(BigDecimal.ZERO, BigDecimal::add);

                if (request.getAmountApproved().compareTo(totalAllocationAmount) < 0) {
                    return ResponseEntity.badRequest()
                            .body("Error: Amount approved (" + request.getAmountApproved() +
                                    ") cannot be less than total allocation amount (" + totalAllocationAmount + ")");
                }
            }

            // Create budget line entity (don't set budgetId - let JPA auto-generate it)
            BudgetLine budgetLine = new BudgetLine();
            // budgetId will be auto-generated by JPA

            // Automatically set tenant ID from logged-in user (same as project module)
            String currentTenantId = loggedInUserUtils.getLoggedInUser().getTenant().getTenantId().toString();
            budgetLine.setTenantId(currentTenantId);

            budgetLine.setBudgetName(request.getBudgetName());
            budgetLine.setBudgetDescription(request.getBudgetDescription());
            budgetLine.setBudgetLineItem(request.getBudgetLineItem());
            budgetLine.setBudgetEndDate(request.getBudgetEndDate());
            budgetLine.setBudgetOwner(request.getBudgetOwner());
            budgetLine.setSponsor(request.getSponsor());
            budgetLine.setLob(request.getLob());
            budgetLine.setCurrency(request.getCurrency());
            budgetLine.setAmountApproved(request.getAmountApproved());
            budgetLine.setAmountUtilized(request.getAmountUtilized());
            budgetLine.setAmountAvailable(request.getAmountAvailable());
            budgetLine.setRemarks(request.getRemarks());
            budgetLine.setStartTimestamp(LocalDateTime.now());
            budgetLine.setLastUpdatedBy(null);
            budgetLine.setEndTimestamp(null);
            budgetLine.setAttachment(request.getAttachment());

            // Save budget line
            BudgetLine savedBudgetLine = budgetLineService.save(budgetLine);

            // Save allocations if provided
            if (request.getAllocations() != null) {
                for (BudgetLineAllocationRequest allocationRequest : request.getAllocations()) {
                    BudgetAllocation allocation = new BudgetAllocation();
                    allocation.setBudgetLine(savedBudgetLine);
                    allocation.setTenantId(currentTenantId);
                    allocation.setVendorName(allocationRequest.getVendorName());
                    allocation.setAmount(allocationRequest.getAmount());
                    allocation.setRemarks(allocationRequest.getRemarks());
                    allocation.setStartTimestamp(LocalDateTime.now());
                    allocation.setEndTimestamp(null);
                    allocation.setLastUpdatedBy(null);

                    // Handle system - either from SystemMaster or custom system name
                    if (allocationRequest.getSystemId() != null) {
                        // Use existing system from SystemMaster
                        SystemMaster system = systemMasterService.getSystemById(allocationRequest.getSystemId());
                        if (system != null) {
                            allocation.setSystem(system);
                            allocation.setSystemName(system.getSystemName());
                        } else {
                            allocation.setSystemName(allocationRequest.getSystemName());
                        }
                    } else if (allocationRequest.getSystemName() != null
                            && !allocationRequest.getSystemName().trim().isEmpty()) {
                        // Use custom system name
                        allocation.setSystemName(allocationRequest.getSystemName().trim());
                    }

                    budgetAllocationService.save(allocation);
                }
            }

            BudgetLineResponse response = convertToResponse(savedBudgetLine);
            return ResponseEntity.status(HttpStatus.CREATED).body(response);

        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Error creating budget line: " + e.getMessage());
        }
    }

    /**
     * Edit an existing budget line item
     */
    @PutMapping("/{budgetId}")
    @Transactional
    public ResponseEntity<?> editBudgetLine(@PathVariable Integer budgetId,
                                            @Valid @RequestBody BudgetLineRequest request) {
        try {
            // 1. Fetch active budget line
            BudgetLine existingBudgetLine = budgetLineService.findById(budgetId)
                    .orElseThrow(() -> new RuntimeException("Budget line not found with ID: " + budgetId));

            // 2. Close old budget line
            String updatedBy = loggedInUserUtils.getLoggedInUser().getEmail();

            existingBudgetLine.setEndTimestamp(LocalDateTime.now());
            existingBudgetLine.setLastUpdatedBy(updatedBy);
            budgetLineService.save(existingBudgetLine);

            // 3. Create new version of budget line
            BudgetLine newBudgetLine = new BudgetLine();
            newBudgetLine.setTenantId(existingBudgetLine.getTenantId());

            // copy values from request or fallback to existing
            newBudgetLine.setBudgetName(request.getBudgetName() != null ? request.getBudgetName() : existingBudgetLine.getBudgetName());
            newBudgetLine.setBudgetDescription(request.getBudgetDescription() != null ? request.getBudgetDescription() : existingBudgetLine.getBudgetDescription());
            newBudgetLine.setBudgetLineItem(request.getBudgetLineItem() != null ? request.getBudgetLineItem() : existingBudgetLine.getBudgetLineItem());
            newBudgetLine.setBudgetEndDate(request.getBudgetEndDate() != null ? request.getBudgetEndDate() : existingBudgetLine.getBudgetEndDate());
            newBudgetLine.setBudgetOwner(request.getBudgetOwner() != null ? request.getBudgetOwner() : existingBudgetLine.getBudgetOwner());
            newBudgetLine.setSponsor(request.getSponsor() != null ? request.getSponsor() : existingBudgetLine.getSponsor());
            newBudgetLine.setLob(request.getLob() != null ? request.getLob() : existingBudgetLine.getLob());
            newBudgetLine.setCurrency(request.getCurrency() != null ? request.getCurrency() : existingBudgetLine.getCurrency());
            newBudgetLine.setAmountApproved(request.getAmountApproved() != null ? request.getAmountApproved() : existingBudgetLine.getAmountApproved());
            newBudgetLine.setAmountUtilized(request.getAmountUtilized() != null ? request.getAmountUtilized() : existingBudgetLine.getAmountUtilized());
            newBudgetLine.setAmountAvailable(request.getAmountAvailable() != null ? request.getAmountAvailable() : existingBudgetLine.getAmountAvailable());
            newBudgetLine.setRemarks(request.getRemarks() != null ? request.getRemarks() : existingBudgetLine.getRemarks());
            newBudgetLine.setAttachment(request.getAttachment() != null ? request.getAttachment() : existingBudgetLine.getAttachment());

            newBudgetLine.setStartTimestamp(LocalDateTime.now());
            newBudgetLine.setEndTimestamp(null);
            newBudgetLine.setLastUpdatedBy(updatedBy);

            // save new budget line
            newBudgetLine = budgetLineService.save(newBudgetLine);

            // 4. Close old allocations
            List<BudgetAllocation> oldAllocations = budgetAllocationService.findByBudgetLineId(budgetId);
            for (BudgetAllocation alloc : oldAllocations) {
                alloc.setEndTimestamp(LocalDateTime.now());
                alloc.setLastUpdatedBy(updatedBy);
                budgetAllocationService.save(alloc);
            }

            // 5. Create new allocations
            if (request.getAllocations() != null && !request.getAllocations().isEmpty()) {
                for (BudgetLineAllocationRequest allocReq : request.getAllocations()) {
                    BudgetAllocation newAlloc = new BudgetAllocation();
                    newAlloc.setBudgetLine(newBudgetLine);
                    newAlloc.setTenantId(newBudgetLine.getTenantId());
                    newAlloc.setVendorName(allocReq.getVendorName());
                    newAlloc.setAmount(allocReq.getAmount());
                    newAlloc.setRemarks(allocReq.getRemarks());
                    newAlloc.setStartTimestamp(LocalDateTime.now());
                    newAlloc.setEndTimestamp(null);
                    newAlloc.setLastUpdatedBy(updatedBy);

                    // handle system
                    if (allocReq.getSystemId() != null) {
                        SystemMaster system = systemMasterService.getSystemById(allocReq.getSystemId());
                        if (system != null) {
                            newAlloc.setSystem(system);
                            newAlloc.setSystemName(system.getSystemName());
                        } else {
                            newAlloc.setSystemName(allocReq.getSystemName());
                        }
                    } else if (allocReq.getSystemName() != null && !allocReq.getSystemName().trim().isEmpty()) {
                        newAlloc.setSystemName(allocReq.getSystemName().trim());
                    }

                    budgetAllocationService.save(newAlloc);
                }
            } else {
                // if no new allocations passed, carry forward old ones into new version
                for (BudgetAllocation oldAlloc : oldAllocations) {
                    BudgetAllocation carriedAlloc = new BudgetAllocation();
                    carriedAlloc.setBudgetLine(newBudgetLine);
                    carriedAlloc.setTenantId(oldAlloc.getTenantId());
                    carriedAlloc.setVendorName(oldAlloc.getVendorName());
                    carriedAlloc.setAmount(oldAlloc.getAmount());
                    carriedAlloc.setRemarks(oldAlloc.getRemarks());
                    carriedAlloc.setSystem(oldAlloc.getSystem());
                    carriedAlloc.setSystemName(oldAlloc.getSystemName());
                    carriedAlloc.setStartTimestamp(LocalDateTime.now());
                    carriedAlloc.setEndTimestamp(null);
                    carriedAlloc.setLastUpdatedBy(updatedBy);
                    budgetAllocationService.save(carriedAlloc);
                }
            }

            // 6. Return response for new version
            BudgetLineResponse response = convertToResponse(newBudgetLine);
            return ResponseEntity.ok(response);

        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Error updating budget line: " + e.getMessage());
        }
    }

    /**
     * Get budget line by ID
     */
    @GetMapping("/{budgetId}")
    public ResponseEntity<?> getBudgetLine(@PathVariable Integer budgetId) {
        try {
            Optional<BudgetLine> budgetLineOpt = budgetLineService.findById(budgetId);

            if (!budgetLineOpt.isPresent()) {
                return ResponseEntity.notFound().build();
            }

            BudgetLineResponse response = convertToResponse(budgetLineOpt.get());
            return ResponseEntity.ok(response);

        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Error retrieving budget line: " + e.getMessage());
        }
    }

    /**
     * Get all budget lines
     */
    @GetMapping
    public ResponseEntity<?> getAllBudgetLines() {
        try {
            List<BudgetLine> budgetLines = budgetLineService.findAll();
            List<BudgetLineResponse> responses = budgetLines.stream()
                    .map(this::convertToResponse)
                    .collect(java.util.stream.Collectors.toList());

            return ResponseEntity.ok(responses);

        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Error retrieving budget lines: " + e.getMessage());
        }
    }

    /**
     * Get budget lines by tenant ID
     */
    @GetMapping("/tenant/{tenantId}")
    public ResponseEntity<?> getBudgetLinesByTenant(@PathVariable String tenantId) {
        try {
            List<BudgetLine> budgetLines = budgetLineService.findByTenantIdAndEndTimestampIsNull(tenantId);
            List<BudgetLineResponse> responses = budgetLines.stream()
                    .map(this::convertToResponse)
                    .collect(java.util.stream.Collectors.toList());

            return ResponseEntity.ok(responses);

        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Error retrieving budget lines by tenant: " + e.getMessage());
        }
    }

    /**
     * Get budget lines by budget owner
     */
    @GetMapping("/owner/{budgetOwner}")
    public ResponseEntity<?> getBudgetLinesByOwner(@PathVariable String budgetOwner) {
        try {
            List<BudgetLine> budgetLines = budgetLineService.findByBudgetOwner(budgetOwner);
            List<BudgetLineResponse> responses = budgetLines.stream()
                    .map(this::convertToResponse)
                    .collect(java.util.stream.Collectors.toList());

            return ResponseEntity.ok(responses);

        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Error retrieving budget lines by owner: " + e.getMessage());
        }
    }

    /**
     * Delete budget line by ID
     */
    @DeleteMapping("/{budgetId}")
    public ResponseEntity<?> deleteBudgetLine(@PathVariable Integer budgetId) {
        try {
            BudgetLine budgetLineOpt = budgetLineService.findById(budgetId)
                    .orElseThrow(()->new RuntimeException("Budget Line not found"));

            // Delete associated allocations first
            budgetAllocationService.deleteByBudgetLineId(budgetId);

            // Delete associated documents first
            budgetDocumentService.deleteDocumentsByBudgetId(budgetId);

            budgetLineOpt.setEndTimestamp(LocalDateTime.now());
            budgetLineOpt.setLastUpdatedBy(loggedInUserUtils.getLoggedInUser().getEmail());
            budgetLineService.save(budgetLineOpt);

            return ResponseEntity.ok("Budget line deleted successfully");

        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Error deleting budget line: " + e.getMessage());
        }
    }

    /**
     * Convert BudgetLine entity to response DTO
     */
    private BudgetLineResponse convertToResponse(BudgetLine budgetLine) {
        BudgetLineResponse response = new BudgetLineResponse();
        response.setBudgetId(budgetLine.getBudgetId());
        response.setTenantId(budgetLine.getTenantId());
        response.setBudgetName(budgetLine.getBudgetName());
        response.setBudgetDescription(budgetLine.getBudgetDescription());
        response.setBudgetLineItem(budgetLine.getBudgetLineItem());
        response.setBudgetEndDate(budgetLine.getBudgetEndDate());
        response.setBudgetOwner(budgetLine.getBudgetOwner());
        response.setSponsor(budgetLine.getSponsor());
        response.setLob(budgetLine.getLob());
        response.setCurrency(budgetLine.getCurrency());
        response.setAmountApproved(budgetLine.getAmountApproved());
        response.setAmountUtilized(budgetLine.getAmountUtilized());
        response.setAmountAvailable(budgetLine.getAmountAvailable());
        response.setRemarks(budgetLine.getRemarks());
        response.setStartTimestamp(budgetLine.getStartTimestamp());
        response.setEndTimestamp(budgetLine.getEndTimestamp());
        response.setLastUpdatedBy(budgetLine.getLastUpdatedBy());
        response.setHasAttachment(budgetLine.getAttachment() != null && budgetLine.getAttachment().length > 0);

        // Get allocations for this budget line - convert to DTOs to avoid lazy loading
        // issues
        List<BudgetAllocation> allocations = budgetAllocationService.findByBudgetLineId(budgetLine.getBudgetId());

        // Convert allocations to simple DTOs to avoid lazy loading issues
        List<BudgetAllocationResponse> allocationDTOs = allocations.stream()
                .map(allocation -> {
                    BudgetAllocationResponse allocationDTO = new BudgetAllocationResponse();
                    allocationDTO.setAllocationId(allocation.getAllocationId());
                    allocationDTO.setBudgetLineId(allocation.getBudgetLine().getBudgetId());
                    allocationDTO.setBudgetLineName(allocation.getBudgetLine().getBudgetName());
                    allocationDTO.setTenantId(allocation.getTenantId());
                    allocationDTO.setVendorName(allocation.getVendorName());
                    allocationDTO.setSystemName(allocation.getSystemName() != null ? allocation.getSystemName()
                            : (allocation.getSystem() != null ? allocation.getSystem().getSystemName() : null));
                    allocationDTO.setAmount(allocation.getAmount());
                    allocationDTO.setRemarks(allocation.getRemarks());
                    return allocationDTO;
                })
                .collect(java.util.stream.Collectors.toList());

        response.setAllocations(allocationDTOs);

        return response;
    }
}